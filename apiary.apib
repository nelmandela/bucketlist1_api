FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Kickbucket

Kickbucket is a simple API that allows users to register,login then create,get,update and delete resources.

##  User Sign up [/api/v1/auth/register]

### Registration [POST]
+ Request (application/json)

        {
            "username": "nel",
            "email": "nel@nel.com", 
            "password": "12345678"
        }
   
+ Response 200 (application/json)

        {
            "status": "success",
            "message": "User Registered"
        }

        
##  User Login [/api/v1/auth/login]

### Login [POST]
+ Request (application/json)

        {
            "username": "nel",
            "password": "12345678"
        }
   
+ Response 200 (application/json)

        {
            "status": "success",
            "message": "Log in Successful",
            "Authorization": token
        }


##  Bucketlist Resource [/api/v1/bucketlists]

### Create [POST]
+ Request (application/json)

        {
            "name": "Adventure"
        }

+ Response 201 (application/json)

        {
            "status": "success",
            "message": "Bucketlist created"
        }

### Fetch [GET]
+ Request (application/json)

        {
            "bucketlistId": bucket.id,
            "name": bucket.name,
            "created_on": str(bucket.created_on)
        }

+ Response 200 (application/json)

        {
            "status": "success",
            "bucketlist": bucket_data
        }

### Update [PUT]
+ Request (application/json)

        {
            "name": "Adventure"
        }

+ Response 201 (application/json)

        {
            "status": "success",
            "message": "Bucketlist updated",
            "data": {
                "bucketlistId": bucketlist.id,
                "name": bucketlist.name
            }
        }

### Delete [DELETE]
+ Request (application/json)

+ Response 200 (application/json)

        {
            "status": "success",
            "message": "Item deleted"
        }

##  Item Resources [/api/v1/bucketlists/<id>/items]

### Create [POST]
+ Request (application/json)
        
        {
            "name": "Zip lining"
        }

+ Response 201 (application/json)

        {
            "status": "success",
            "message": "Item created"
        }

### Fetch [GET]
+ Request (application/json)
        
        {
            item_dict = {}
            item_dict['id'] = items.id
            item_dict['name'] = items.name
            item_dict['created_on'] = str(items.created_on)
        }
        
+ Response 201 (application/json)

        {
            item_data
        }
        
### Update [PUT]
+ Request (application/json)

        {
            "name": "Visit the Bahamas"
        }
        
+ Response 201 (application/json)

        {      
            "status": "success",
            "message": "Item updated",
            "data": {
                "itemId": item.id,
                "name": item.name
            }
        }        
    
### Delete [DELETE]
+ Request (application/json)

+ Response 200 (application/json)

        {
            "status": "success",
            "message": "Item deleted"
        }